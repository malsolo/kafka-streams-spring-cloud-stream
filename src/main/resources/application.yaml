server:
  port: 8088

spring:
  kafka:
    consumer:
      bootstrap-servers: localhost:9092
      group-id: purchasesKafkaStreamSpringCloudStreamGroup
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
    properties:
      schema.registry.url: http://localhost:8081
      specific.avro.reader: true
  cloud:
    stream:
      function:
        definition: purchasesProcessor;patternsProcessor;purchasesKeySelectorProcessor;rewardsProcessor
      bindings:
        purchasesProcessor-in-0:
          destination: kafka-streams-demo-transactions
        purchasesProcessor-out-0:
          destination: kafka-streams-demo-purchases
        patternsProcessor-in-0:
          destination: kafka-streams-demo-transactions
        patternsProcessor-out-0:
          destination: kafka-streams-demo-patterns
        purchasesKeySelectorProcessor-in-0:
          destination: kafka-streams-demo-transactions
        purchasesKeySelectorProcessor-out-0:
          destination: kafka-streams-demo-purchases-keyed
        rewardsProcessor-in-0:
          destination: kafka-streams-demo-purchases-keyed
        rewardsProcessor-out-0:
          destination: kafka-streams-demo-rewards
      kafka:
        streams:
          binder:
            # application-id: if_you_hava_a_single_processor
            brokers: localhost:9092
            configuration:
              schema.registry.url: http://localhost:8081
              commit.interval.ms: 3000
              default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
              default.value.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
              # specific.avro.reader: true
            functions:
              purchasesProcessor:
                applicationId: spring-cloud-streams-purchasesProcessor
              patternsProcessor:
                applicationId: spring-cloud-streams-patternsProcessor
              purchasesKeySelectorProcessor:
                applicationId: spring-cloud-streams-purchasesKeySelectorProcessor
              rewardsProcessor:
                applicationId: spring-cloud-streams-rewardsProcessor
streams:
  state-store:
    rewards-points: rewardsPointsStore
purchases:
  kafka:
    producer:
      transactions:
        auto-start: true
        topic: kafka-streams-demo-transactions
        number-of-executions: 10
        initial-delay-in-milliseconds: 1000
        delay-in-milliseconds: 250
    consumer:
      purchases:
        auto-start: true
        group-id: PurchasesConsumerGroup
        topic: kafka-streams-demo-purchases
      patterns:
        auto-start: true
        group-id: PurchasePatternConsumerGroup
        topic: kafka-streams-demo-patterns
      purchaseskeyed:
        auto-start: true
        group-id: PurchasesKeyedConsumerGroup
        topic: kafka-streams-demo-purchases-keyed
      rewards:
        auto-start: true
        group-id: RewardsConsumerGroup
        topic: kafka-streams-demo-rewards
