/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.malsolo.kafka.streams.spring.cloud.stream.model.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Purchase extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8829394932384202439L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Purchase\",\"namespace\":\"com.malsolo.kafka.streams.spring.cloud.stream.model.avro\",\"fields\":[{\"name\":\"firstName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"creditCardNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"itemPurchased\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"department\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"employeeId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"price\",\"type\":\"double\"},{\"name\":\"purchaseDate\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}},{\"name\":\"zipCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"storeId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
  }

  private static final BinaryMessageEncoder<Purchase> ENCODER =
      new BinaryMessageEncoder<Purchase>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Purchase> DECODER =
      new BinaryMessageDecoder<Purchase>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Purchase> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Purchase> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Purchase> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Purchase>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Purchase to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Purchase from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Purchase instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Purchase fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String firstName;
   private java.lang.String lastName;
   private java.lang.String customerId;
   private java.lang.String creditCardNumber;
   private java.lang.String itemPurchased;
   private java.lang.String department;
   private java.lang.String employeeId;
   private int quantity;
   private double price;
   private java.time.LocalDate purchaseDate;
   private java.lang.String zipCode;
   private java.lang.String storeId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Purchase() {}

  /**
   * All-args constructor.
   * @param firstName The new value for firstName
   * @param lastName The new value for lastName
   * @param customerId The new value for customerId
   * @param creditCardNumber The new value for creditCardNumber
   * @param itemPurchased The new value for itemPurchased
   * @param department The new value for department
   * @param employeeId The new value for employeeId
   * @param quantity The new value for quantity
   * @param price The new value for price
   * @param purchaseDate The new value for purchaseDate
   * @param zipCode The new value for zipCode
   * @param storeId The new value for storeId
   */
  public Purchase(java.lang.String firstName, java.lang.String lastName, java.lang.String customerId, java.lang.String creditCardNumber, java.lang.String itemPurchased, java.lang.String department, java.lang.String employeeId, java.lang.Integer quantity, java.lang.Double price, java.time.LocalDate purchaseDate, java.lang.String zipCode, java.lang.String storeId) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.customerId = customerId;
    this.creditCardNumber = creditCardNumber;
    this.itemPurchased = itemPurchased;
    this.department = department;
    this.employeeId = employeeId;
    this.quantity = quantity;
    this.price = price;
    this.purchaseDate = purchaseDate;
    this.zipCode = zipCode;
    this.storeId = storeId;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return firstName;
    case 1: return lastName;
    case 2: return customerId;
    case 3: return creditCardNumber;
    case 4: return itemPurchased;
    case 5: return department;
    case 6: return employeeId;
    case 7: return quantity;
    case 8: return price;
    case 9: return purchaseDate;
    case 10: return zipCode;
    case 11: return storeId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.DateConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: firstName = value$ != null ? value$.toString() : null; break;
    case 1: lastName = value$ != null ? value$.toString() : null; break;
    case 2: customerId = value$ != null ? value$.toString() : null; break;
    case 3: creditCardNumber = value$ != null ? value$.toString() : null; break;
    case 4: itemPurchased = value$ != null ? value$.toString() : null; break;
    case 5: department = value$ != null ? value$.toString() : null; break;
    case 6: employeeId = value$ != null ? value$.toString() : null; break;
    case 7: quantity = (java.lang.Integer)value$; break;
    case 8: price = (java.lang.Double)value$; break;
    case 9: purchaseDate = (java.time.LocalDate)value$; break;
    case 10: zipCode = value$ != null ? value$.toString() : null; break;
    case 11: storeId = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'firstName' field.
   * @return The value of the 'firstName' field.
   */
  public java.lang.String getFirstName() {
    return firstName;
  }


  /**
   * Sets the value of the 'firstName' field.
   * @param value the value to set.
   */
  public void setFirstName(java.lang.String value) {
    this.firstName = value;
  }

  /**
   * Gets the value of the 'lastName' field.
   * @return The value of the 'lastName' field.
   */
  public java.lang.String getLastName() {
    return lastName;
  }


  /**
   * Sets the value of the 'lastName' field.
   * @param value the value to set.
   */
  public void setLastName(java.lang.String value) {
    this.lastName = value;
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public java.lang.String getCustomerId() {
    return customerId;
  }


  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.String value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'creditCardNumber' field.
   * @return The value of the 'creditCardNumber' field.
   */
  public java.lang.String getCreditCardNumber() {
    return creditCardNumber;
  }


  /**
   * Sets the value of the 'creditCardNumber' field.
   * @param value the value to set.
   */
  public void setCreditCardNumber(java.lang.String value) {
    this.creditCardNumber = value;
  }

  /**
   * Gets the value of the 'itemPurchased' field.
   * @return The value of the 'itemPurchased' field.
   */
  public java.lang.String getItemPurchased() {
    return itemPurchased;
  }


  /**
   * Sets the value of the 'itemPurchased' field.
   * @param value the value to set.
   */
  public void setItemPurchased(java.lang.String value) {
    this.itemPurchased = value;
  }

  /**
   * Gets the value of the 'department' field.
   * @return The value of the 'department' field.
   */
  public java.lang.String getDepartment() {
    return department;
  }


  /**
   * Sets the value of the 'department' field.
   * @param value the value to set.
   */
  public void setDepartment(java.lang.String value) {
    this.department = value;
  }

  /**
   * Gets the value of the 'employeeId' field.
   * @return The value of the 'employeeId' field.
   */
  public java.lang.String getEmployeeId() {
    return employeeId;
  }


  /**
   * Sets the value of the 'employeeId' field.
   * @param value the value to set.
   */
  public void setEmployeeId(java.lang.String value) {
    this.employeeId = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public int getQuantity() {
    return quantity;
  }


  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(int value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public double getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'purchaseDate' field.
   * @return The value of the 'purchaseDate' field.
   */
  public java.time.LocalDate getPurchaseDate() {
    return purchaseDate;
  }


  /**
   * Sets the value of the 'purchaseDate' field.
   * @param value the value to set.
   */
  public void setPurchaseDate(java.time.LocalDate value) {
    this.purchaseDate = value;
  }

  /**
   * Gets the value of the 'zipCode' field.
   * @return The value of the 'zipCode' field.
   */
  public java.lang.String getZipCode() {
    return zipCode;
  }


  /**
   * Sets the value of the 'zipCode' field.
   * @param value the value to set.
   */
  public void setZipCode(java.lang.String value) {
    this.zipCode = value;
  }

  /**
   * Gets the value of the 'storeId' field.
   * @return The value of the 'storeId' field.
   */
  public java.lang.String getStoreId() {
    return storeId;
  }


  /**
   * Sets the value of the 'storeId' field.
   * @param value the value to set.
   */
  public void setStoreId(java.lang.String value) {
    this.storeId = value;
  }

  /**
   * Creates a new Purchase RecordBuilder.
   * @return A new Purchase RecordBuilder
   */
  public static com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder newBuilder() {
    return new com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder();
  }

  /**
   * Creates a new Purchase RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Purchase RecordBuilder
   */
  public static com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder newBuilder(com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder other) {
    if (other == null) {
      return new com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder();
    } else {
      return new com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder(other);
    }
  }

  /**
   * Creates a new Purchase RecordBuilder by copying an existing Purchase instance.
   * @param other The existing instance to copy.
   * @return A new Purchase RecordBuilder
   */
  public static com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder newBuilder(com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase other) {
    if (other == null) {
      return new com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder();
    } else {
      return new com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder(other);
    }
  }

  /**
   * RecordBuilder for Purchase instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Purchase>
    implements org.apache.avro.data.RecordBuilder<Purchase> {

    private java.lang.String firstName;
    private java.lang.String lastName;
    private java.lang.String customerId;
    private java.lang.String creditCardNumber;
    private java.lang.String itemPurchased;
    private java.lang.String department;
    private java.lang.String employeeId;
    private int quantity;
    private double price;
    private java.time.LocalDate purchaseDate;
    private java.lang.String zipCode;
    private java.lang.String storeId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.firstName)) {
        this.firstName = data().deepCopy(fields()[0].schema(), other.firstName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.lastName)) {
        this.lastName = data().deepCopy(fields()[1].schema(), other.lastName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.customerId)) {
        this.customerId = data().deepCopy(fields()[2].schema(), other.customerId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.creditCardNumber)) {
        this.creditCardNumber = data().deepCopy(fields()[3].schema(), other.creditCardNumber);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.itemPurchased)) {
        this.itemPurchased = data().deepCopy(fields()[4].schema(), other.itemPurchased);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.department)) {
        this.department = data().deepCopy(fields()[5].schema(), other.department);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.employeeId)) {
        this.employeeId = data().deepCopy(fields()[6].schema(), other.employeeId);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.quantity)) {
        this.quantity = data().deepCopy(fields()[7].schema(), other.quantity);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.price)) {
        this.price = data().deepCopy(fields()[8].schema(), other.price);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.purchaseDate)) {
        this.purchaseDate = data().deepCopy(fields()[9].schema(), other.purchaseDate);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.zipCode)) {
        this.zipCode = data().deepCopy(fields()[10].schema(), other.zipCode);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.storeId)) {
        this.storeId = data().deepCopy(fields()[11].schema(), other.storeId);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
    }

    /**
     * Creates a Builder by copying an existing Purchase instance
     * @param other The existing instance to copy.
     */
    private Builder(com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.firstName)) {
        this.firstName = data().deepCopy(fields()[0].schema(), other.firstName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastName)) {
        this.lastName = data().deepCopy(fields()[1].schema(), other.lastName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customerId)) {
        this.customerId = data().deepCopy(fields()[2].schema(), other.customerId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.creditCardNumber)) {
        this.creditCardNumber = data().deepCopy(fields()[3].schema(), other.creditCardNumber);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.itemPurchased)) {
        this.itemPurchased = data().deepCopy(fields()[4].schema(), other.itemPurchased);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.department)) {
        this.department = data().deepCopy(fields()[5].schema(), other.department);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.employeeId)) {
        this.employeeId = data().deepCopy(fields()[6].schema(), other.employeeId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.quantity)) {
        this.quantity = data().deepCopy(fields()[7].schema(), other.quantity);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.price)) {
        this.price = data().deepCopy(fields()[8].schema(), other.price);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.purchaseDate)) {
        this.purchaseDate = data().deepCopy(fields()[9].schema(), other.purchaseDate);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.zipCode)) {
        this.zipCode = data().deepCopy(fields()[10].schema(), other.zipCode);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.storeId)) {
        this.storeId = data().deepCopy(fields()[11].schema(), other.storeId);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'firstName' field.
      * @return The value.
      */
    public java.lang.String getFirstName() {
      return firstName;
    }


    /**
      * Sets the value of the 'firstName' field.
      * @param value The value of 'firstName'.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder setFirstName(java.lang.String value) {
      validate(fields()[0], value);
      this.firstName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'firstName' field has been set.
      * @return True if the 'firstName' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'firstName' field.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastName' field.
      * @return The value.
      */
    public java.lang.String getLastName() {
      return lastName;
    }


    /**
      * Sets the value of the 'lastName' field.
      * @param value The value of 'lastName'.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder setLastName(java.lang.String value) {
      validate(fields()[1], value);
      this.lastName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lastName' field has been set.
      * @return True if the 'lastName' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lastName' field.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public java.lang.String getCustomerId() {
      return customerId;
    }


    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder setCustomerId(java.lang.String value) {
      validate(fields()[2], value);
      this.customerId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'creditCardNumber' field.
      * @return The value.
      */
    public java.lang.String getCreditCardNumber() {
      return creditCardNumber;
    }


    /**
      * Sets the value of the 'creditCardNumber' field.
      * @param value The value of 'creditCardNumber'.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder setCreditCardNumber(java.lang.String value) {
      validate(fields()[3], value);
      this.creditCardNumber = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'creditCardNumber' field has been set.
      * @return True if the 'creditCardNumber' field has been set, false otherwise.
      */
    public boolean hasCreditCardNumber() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'creditCardNumber' field.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder clearCreditCardNumber() {
      creditCardNumber = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemPurchased' field.
      * @return The value.
      */
    public java.lang.String getItemPurchased() {
      return itemPurchased;
    }


    /**
      * Sets the value of the 'itemPurchased' field.
      * @param value The value of 'itemPurchased'.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder setItemPurchased(java.lang.String value) {
      validate(fields()[4], value);
      this.itemPurchased = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'itemPurchased' field has been set.
      * @return True if the 'itemPurchased' field has been set, false otherwise.
      */
    public boolean hasItemPurchased() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'itemPurchased' field.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder clearItemPurchased() {
      itemPurchased = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'department' field.
      * @return The value.
      */
    public java.lang.String getDepartment() {
      return department;
    }


    /**
      * Sets the value of the 'department' field.
      * @param value The value of 'department'.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder setDepartment(java.lang.String value) {
      validate(fields()[5], value);
      this.department = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'department' field has been set.
      * @return True if the 'department' field has been set, false otherwise.
      */
    public boolean hasDepartment() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'department' field.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder clearDepartment() {
      department = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'employeeId' field.
      * @return The value.
      */
    public java.lang.String getEmployeeId() {
      return employeeId;
    }


    /**
      * Sets the value of the 'employeeId' field.
      * @param value The value of 'employeeId'.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder setEmployeeId(java.lang.String value) {
      validate(fields()[6], value);
      this.employeeId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'employeeId' field has been set.
      * @return True if the 'employeeId' field has been set, false otherwise.
      */
    public boolean hasEmployeeId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'employeeId' field.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder clearEmployeeId() {
      employeeId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public int getQuantity() {
      return quantity;
    }


    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder setQuantity(int value) {
      validate(fields()[7], value);
      this.quantity = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder clearQuantity() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public double getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder setPrice(double value) {
      validate(fields()[8], value);
      this.price = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder clearPrice() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'purchaseDate' field.
      * @return The value.
      */
    public java.time.LocalDate getPurchaseDate() {
      return purchaseDate;
    }


    /**
      * Sets the value of the 'purchaseDate' field.
      * @param value The value of 'purchaseDate'.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder setPurchaseDate(java.time.LocalDate value) {
      validate(fields()[9], value);
      this.purchaseDate = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'purchaseDate' field has been set.
      * @return True if the 'purchaseDate' field has been set, false otherwise.
      */
    public boolean hasPurchaseDate() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'purchaseDate' field.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder clearPurchaseDate() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'zipCode' field.
      * @return The value.
      */
    public java.lang.String getZipCode() {
      return zipCode;
    }


    /**
      * Sets the value of the 'zipCode' field.
      * @param value The value of 'zipCode'.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder setZipCode(java.lang.String value) {
      validate(fields()[10], value);
      this.zipCode = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'zipCode' field has been set.
      * @return True if the 'zipCode' field has been set, false otherwise.
      */
    public boolean hasZipCode() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'zipCode' field.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder clearZipCode() {
      zipCode = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'storeId' field.
      * @return The value.
      */
    public java.lang.String getStoreId() {
      return storeId;
    }


    /**
      * Sets the value of the 'storeId' field.
      * @param value The value of 'storeId'.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder setStoreId(java.lang.String value) {
      validate(fields()[11], value);
      this.storeId = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'storeId' field has been set.
      * @return True if the 'storeId' field has been set, false otherwise.
      */
    public boolean hasStoreId() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'storeId' field.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.spring.cloud.stream.model.avro.Purchase.Builder clearStoreId() {
      storeId = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Purchase build() {
      try {
        Purchase record = new Purchase();
        record.firstName = fieldSetFlags()[0] ? this.firstName : (java.lang.String) defaultValue(fields()[0]);
        record.lastName = fieldSetFlags()[1] ? this.lastName : (java.lang.String) defaultValue(fields()[1]);
        record.customerId = fieldSetFlags()[2] ? this.customerId : (java.lang.String) defaultValue(fields()[2]);
        record.creditCardNumber = fieldSetFlags()[3] ? this.creditCardNumber : (java.lang.String) defaultValue(fields()[3]);
        record.itemPurchased = fieldSetFlags()[4] ? this.itemPurchased : (java.lang.String) defaultValue(fields()[4]);
        record.department = fieldSetFlags()[5] ? this.department : (java.lang.String) defaultValue(fields()[5]);
        record.employeeId = fieldSetFlags()[6] ? this.employeeId : (java.lang.String) defaultValue(fields()[6]);
        record.quantity = fieldSetFlags()[7] ? this.quantity : (java.lang.Integer) defaultValue(fields()[7]);
        record.price = fieldSetFlags()[8] ? this.price : (java.lang.Double) defaultValue(fields()[8]);
        record.purchaseDate = fieldSetFlags()[9] ? this.purchaseDate : (java.time.LocalDate) defaultValue(fields()[9]);
        record.zipCode = fieldSetFlags()[10] ? this.zipCode : (java.lang.String) defaultValue(fields()[10]);
        record.storeId = fieldSetFlags()[11] ? this.storeId : (java.lang.String) defaultValue(fields()[11]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Purchase>
    WRITER$ = (org.apache.avro.io.DatumWriter<Purchase>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Purchase>
    READER$ = (org.apache.avro.io.DatumReader<Purchase>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










