/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.malsolo.kafka.purchase.model.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RewardAccumulator extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5008660812766128840L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RewardAccumulator\",\"namespace\":\"com.malsolo.kafka.purchase.model.avro\",\"fields\":[{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"purchaseTotal\",\"type\":\"double\"},{\"name\":\"currentRewardPoints\",\"type\":\"int\"},{\"name\":\"totalRewardPoints\",\"type\":\"int\"},{\"name\":\"daysFromLastPurchase\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RewardAccumulator> ENCODER =
      new BinaryMessageEncoder<RewardAccumulator>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RewardAccumulator> DECODER =
      new BinaryMessageDecoder<RewardAccumulator>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RewardAccumulator> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RewardAccumulator> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RewardAccumulator> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RewardAccumulator>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RewardAccumulator to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RewardAccumulator from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RewardAccumulator instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RewardAccumulator fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String customerId;
   private double purchaseTotal;
   private int currentRewardPoints;
   private int totalRewardPoints;
   private int daysFromLastPurchase;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RewardAccumulator() {}

  /**
   * All-args constructor.
   * @param customerId The new value for customerId
   * @param purchaseTotal The new value for purchaseTotal
   * @param currentRewardPoints The new value for currentRewardPoints
   * @param totalRewardPoints The new value for totalRewardPoints
   * @param daysFromLastPurchase The new value for daysFromLastPurchase
   */
  public RewardAccumulator(java.lang.String customerId, java.lang.Double purchaseTotal, java.lang.Integer currentRewardPoints, java.lang.Integer totalRewardPoints, java.lang.Integer daysFromLastPurchase) {
    this.customerId = customerId;
    this.purchaseTotal = purchaseTotal;
    this.currentRewardPoints = currentRewardPoints;
    this.totalRewardPoints = totalRewardPoints;
    this.daysFromLastPurchase = daysFromLastPurchase;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return customerId;
    case 1: return purchaseTotal;
    case 2: return currentRewardPoints;
    case 3: return totalRewardPoints;
    case 4: return daysFromLastPurchase;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: customerId = value$ != null ? value$.toString() : null; break;
    case 1: purchaseTotal = (java.lang.Double)value$; break;
    case 2: currentRewardPoints = (java.lang.Integer)value$; break;
    case 3: totalRewardPoints = (java.lang.Integer)value$; break;
    case 4: daysFromLastPurchase = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public java.lang.String getCustomerId() {
    return customerId;
  }


  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.String value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'purchaseTotal' field.
   * @return The value of the 'purchaseTotal' field.
   */
  public double getPurchaseTotal() {
    return purchaseTotal;
  }


  /**
   * Sets the value of the 'purchaseTotal' field.
   * @param value the value to set.
   */
  public void setPurchaseTotal(double value) {
    this.purchaseTotal = value;
  }

  /**
   * Gets the value of the 'currentRewardPoints' field.
   * @return The value of the 'currentRewardPoints' field.
   */
  public int getCurrentRewardPoints() {
    return currentRewardPoints;
  }


  /**
   * Sets the value of the 'currentRewardPoints' field.
   * @param value the value to set.
   */
  public void setCurrentRewardPoints(int value) {
    this.currentRewardPoints = value;
  }

  /**
   * Gets the value of the 'totalRewardPoints' field.
   * @return The value of the 'totalRewardPoints' field.
   */
  public int getTotalRewardPoints() {
    return totalRewardPoints;
  }


  /**
   * Sets the value of the 'totalRewardPoints' field.
   * @param value the value to set.
   */
  public void setTotalRewardPoints(int value) {
    this.totalRewardPoints = value;
  }

  /**
   * Gets the value of the 'daysFromLastPurchase' field.
   * @return The value of the 'daysFromLastPurchase' field.
   */
  public int getDaysFromLastPurchase() {
    return daysFromLastPurchase;
  }


  /**
   * Sets the value of the 'daysFromLastPurchase' field.
   * @param value the value to set.
   */
  public void setDaysFromLastPurchase(int value) {
    this.daysFromLastPurchase = value;
  }

  /**
   * Creates a new RewardAccumulator RecordBuilder.
   * @return A new RewardAccumulator RecordBuilder
   */
  public static com.malsolo.kafka.purchase.model.avro.RewardAccumulator.Builder newBuilder() {
    return new com.malsolo.kafka.purchase.model.avro.RewardAccumulator.Builder();
  }

  /**
   * Creates a new RewardAccumulator RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RewardAccumulator RecordBuilder
   */
  public static com.malsolo.kafka.purchase.model.avro.RewardAccumulator.Builder newBuilder(com.malsolo.kafka.purchase.model.avro.RewardAccumulator.Builder other) {
    if (other == null) {
      return new com.malsolo.kafka.purchase.model.avro.RewardAccumulator.Builder();
    } else {
      return new com.malsolo.kafka.purchase.model.avro.RewardAccumulator.Builder(other);
    }
  }

  /**
   * Creates a new RewardAccumulator RecordBuilder by copying an existing RewardAccumulator instance.
   * @param other The existing instance to copy.
   * @return A new RewardAccumulator RecordBuilder
   */
  public static com.malsolo.kafka.purchase.model.avro.RewardAccumulator.Builder newBuilder(com.malsolo.kafka.purchase.model.avro.RewardAccumulator other) {
    if (other == null) {
      return new com.malsolo.kafka.purchase.model.avro.RewardAccumulator.Builder();
    } else {
      return new com.malsolo.kafka.purchase.model.avro.RewardAccumulator.Builder(other);
    }
  }

  /**
   * RecordBuilder for RewardAccumulator instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RewardAccumulator>
    implements org.apache.avro.data.RecordBuilder<RewardAccumulator> {

    private java.lang.String customerId;
    private double purchaseTotal;
    private int currentRewardPoints;
    private int totalRewardPoints;
    private int daysFromLastPurchase;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.malsolo.kafka.purchase.model.avro.RewardAccumulator.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.purchaseTotal)) {
        this.purchaseTotal = data().deepCopy(fields()[1].schema(), other.purchaseTotal);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.currentRewardPoints)) {
        this.currentRewardPoints = data().deepCopy(fields()[2].schema(), other.currentRewardPoints);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.totalRewardPoints)) {
        this.totalRewardPoints = data().deepCopy(fields()[3].schema(), other.totalRewardPoints);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.daysFromLastPurchase)) {
        this.daysFromLastPurchase = data().deepCopy(fields()[4].schema(), other.daysFromLastPurchase);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing RewardAccumulator instance
     * @param other The existing instance to copy.
     */
    private Builder(com.malsolo.kafka.purchase.model.avro.RewardAccumulator other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.purchaseTotal)) {
        this.purchaseTotal = data().deepCopy(fields()[1].schema(), other.purchaseTotal);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.currentRewardPoints)) {
        this.currentRewardPoints = data().deepCopy(fields()[2].schema(), other.currentRewardPoints);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.totalRewardPoints)) {
        this.totalRewardPoints = data().deepCopy(fields()[3].schema(), other.totalRewardPoints);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.daysFromLastPurchase)) {
        this.daysFromLastPurchase = data().deepCopy(fields()[4].schema(), other.daysFromLastPurchase);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public java.lang.String getCustomerId() {
      return customerId;
    }


    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public com.malsolo.kafka.purchase.model.avro.RewardAccumulator.Builder setCustomerId(java.lang.String value) {
      validate(fields()[0], value);
      this.customerId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public com.malsolo.kafka.purchase.model.avro.RewardAccumulator.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'purchaseTotal' field.
      * @return The value.
      */
    public double getPurchaseTotal() {
      return purchaseTotal;
    }


    /**
      * Sets the value of the 'purchaseTotal' field.
      * @param value The value of 'purchaseTotal'.
      * @return This builder.
      */
    public com.malsolo.kafka.purchase.model.avro.RewardAccumulator.Builder setPurchaseTotal(double value) {
      validate(fields()[1], value);
      this.purchaseTotal = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'purchaseTotal' field has been set.
      * @return True if the 'purchaseTotal' field has been set, false otherwise.
      */
    public boolean hasPurchaseTotal() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'purchaseTotal' field.
      * @return This builder.
      */
    public com.malsolo.kafka.purchase.model.avro.RewardAccumulator.Builder clearPurchaseTotal() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'currentRewardPoints' field.
      * @return The value.
      */
    public int getCurrentRewardPoints() {
      return currentRewardPoints;
    }


    /**
      * Sets the value of the 'currentRewardPoints' field.
      * @param value The value of 'currentRewardPoints'.
      * @return This builder.
      */
    public com.malsolo.kafka.purchase.model.avro.RewardAccumulator.Builder setCurrentRewardPoints(int value) {
      validate(fields()[2], value);
      this.currentRewardPoints = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'currentRewardPoints' field has been set.
      * @return True if the 'currentRewardPoints' field has been set, false otherwise.
      */
    public boolean hasCurrentRewardPoints() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'currentRewardPoints' field.
      * @return This builder.
      */
    public com.malsolo.kafka.purchase.model.avro.RewardAccumulator.Builder clearCurrentRewardPoints() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalRewardPoints' field.
      * @return The value.
      */
    public int getTotalRewardPoints() {
      return totalRewardPoints;
    }


    /**
      * Sets the value of the 'totalRewardPoints' field.
      * @param value The value of 'totalRewardPoints'.
      * @return This builder.
      */
    public com.malsolo.kafka.purchase.model.avro.RewardAccumulator.Builder setTotalRewardPoints(int value) {
      validate(fields()[3], value);
      this.totalRewardPoints = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'totalRewardPoints' field has been set.
      * @return True if the 'totalRewardPoints' field has been set, false otherwise.
      */
    public boolean hasTotalRewardPoints() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'totalRewardPoints' field.
      * @return This builder.
      */
    public com.malsolo.kafka.purchase.model.avro.RewardAccumulator.Builder clearTotalRewardPoints() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'daysFromLastPurchase' field.
      * @return The value.
      */
    public int getDaysFromLastPurchase() {
      return daysFromLastPurchase;
    }


    /**
      * Sets the value of the 'daysFromLastPurchase' field.
      * @param value The value of 'daysFromLastPurchase'.
      * @return This builder.
      */
    public com.malsolo.kafka.purchase.model.avro.RewardAccumulator.Builder setDaysFromLastPurchase(int value) {
      validate(fields()[4], value);
      this.daysFromLastPurchase = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'daysFromLastPurchase' field has been set.
      * @return True if the 'daysFromLastPurchase' field has been set, false otherwise.
      */
    public boolean hasDaysFromLastPurchase() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'daysFromLastPurchase' field.
      * @return This builder.
      */
    public com.malsolo.kafka.purchase.model.avro.RewardAccumulator.Builder clearDaysFromLastPurchase() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RewardAccumulator build() {
      try {
        RewardAccumulator record = new RewardAccumulator();
        record.customerId = fieldSetFlags()[0] ? this.customerId : (java.lang.String) defaultValue(fields()[0]);
        record.purchaseTotal = fieldSetFlags()[1] ? this.purchaseTotal : (java.lang.Double) defaultValue(fields()[1]);
        record.currentRewardPoints = fieldSetFlags()[2] ? this.currentRewardPoints : (java.lang.Integer) defaultValue(fields()[2]);
        record.totalRewardPoints = fieldSetFlags()[3] ? this.totalRewardPoints : (java.lang.Integer) defaultValue(fields()[3]);
        record.daysFromLastPurchase = fieldSetFlags()[4] ? this.daysFromLastPurchase : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RewardAccumulator>
    WRITER$ = (org.apache.avro.io.DatumWriter<RewardAccumulator>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RewardAccumulator>
    READER$ = (org.apache.avro.io.DatumReader<RewardAccumulator>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.customerId);

    out.writeDouble(this.purchaseTotal);

    out.writeInt(this.currentRewardPoints);

    out.writeInt(this.totalRewardPoints);

    out.writeInt(this.daysFromLastPurchase);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.customerId = in.readString();

      this.purchaseTotal = in.readDouble();

      this.currentRewardPoints = in.readInt();

      this.totalRewardPoints = in.readInt();

      this.daysFromLastPurchase = in.readInt();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.customerId = in.readString();
          break;

        case 1:
          this.purchaseTotal = in.readDouble();
          break;

        case 2:
          this.currentRewardPoints = in.readInt();
          break;

        case 3:
          this.totalRewardPoints = in.readInt();
          break;

        case 4:
          this.daysFromLastPurchase = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










